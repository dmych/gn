#!/usr/bin/env python
# -*- mode: python; coding: utf-8; -*-

'''gn: Geeky Notes - simplenote CLI client (ver.%s)

Commands:
    $ gn [ls]          - show list of notes
    $ gn [find] 'text' - search for the 'text'
    $ gn new           - new note
    $ gn [ed] N        - edit note N
    $ gn rm N          - delete note N
    $ gn sync          - sync with simplenote
    $ gn help          - show this help
'''

import os
import sys
import sync
import db
import api

config = dict()

def error(msg):
    sys.stderr.write('%s\n' % msg)
    sys.exit(1)

def read_config():
    global config
    cfgname = os.path.expanduser('~/.gn')
    try:
        cfg = open(cfgname)
    except IOError:
        error('Cannot read config file ~/.gn!')
    for line in cfg.readlines():
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        try:
            k, v = line.strip().split('=')
        except ValueError:
            error('Invalid line in config file ~/.gn:\n%s' % line)
        config[k] = v
    cfg.close()

def init():
    global notes, keys
    read_config()
#    config['dir'] = os.path.expanduser(config['dir'])
    # if not os.path.isdir(config['dir']):
    #     os.mkdir(config['dir'])
    notes = db.Database()
    keys = notes.keys(sort=True)

def print_note(i):
    note = db.Note(notes, keys[i])
    md = '[%s]' % note.getModifiedFormatted()
    if note._isModified():
	fl = '*'
    else:
	fl = ' '
    print '%3i:    %s %s %s (%s)' % (i, note.getTitle(50).ljust(50), md.rjust(15), fl, note.getTags().decode('utf-8'))

#### cli commands

def help(arg):
    print __doc__ % (api.VERSION)

def synchronize(arg):
    if not (config.has_key('email') or config.has_key('password')):
        error('No simplenote credentials set in config file!')
    sync.sync(config['email'], config['password'])

def show_list(arg):
    for i in range(len(keys)):
        print_note(i)

def edit(arg):
    TagTemplate = '\n[TAGS]: '
    if arg is not None:
        try:
	    note = db.Note(notes, keys[int(arg)])
        except:
            error('Invalid note number: %s' % arg)
        fname = os.path.join('/tmp', 'geekynote.%s.txt' % arg)
        content = note.getContent().encode('utf-8')
	tags = note.getTags()
	if tags:
	    content += TagTemplate + tags
    else:
        fname = os.path.join('/tmp', 'geekynote.txt')
        content = ''
    fd = open(fname, 'w')
    fd.write(content)
    fd.close()
    mtime = os.path.getmtime(fname)
    edcmd = config['editor']
    if edcmd.find('%s') < 0:
	edcmd += ' %s'
    os.system(edcmd % (fname))
    if mtime != os.path.getmtime(fname):
        if arg is None:
            note = db.Note(notes)
            print 'New note has been created'
	else:
	    print 'The note has been modified!'
	content = open(fname).read()
	try:
	    content, tags = content.split(TagTemplate)
	except:
	    tags = ''
        note.setContent(content)
	note.setTags(tags.strip())
        note.save()
    else:
        print 'Nothing changed'
    os.unlink(fname)

def remove(arg):
    if arg is None:
        error('Note number had not specified!')
    try:
        note = db.Note(notes, keys[int(arg)])
    except:
        error('Invalid note number: %s' % arg)
    note.markDeleted()
    note.save()
    print 'The note %s has been deleted' % arg

def search(arg):
    import re
    found = list()
    for i in range(len(keys)):
        text = db.Note(notes, keys[i]).getContent()
        if re.search(arg, text, re.IGNORECASE) is not None:
            found.append(i)
    if len(found) == 0:
        print "Not found"
        return
    print 'Expression "%s" found in the following notes:'
    for i in found:
        print_note(i)

commands = {
    'ed': edit,
    'new': edit,
    'ls': show_list,
    'rm': remove,
    'sync': synchronize,
    'find': search,
    'help': help,
    '-h': help,
    '--help': help,
    }

if __name__ == '__main__':
    init()
    argv = sys.argv[1:]
    if len(argv) == 0:
        cmd = 'ls'
        arg = None
    else:
        if argv[0] in commands.keys():
            cmd = argv[0]
            if len(argv) > 1:
                arg = argv[1]
            else:
                arg = None
        else:
            cmd = 'ed'
            arg = argv[0]
            try:
                i = int(arg)
            except:
                cmd = 'find'
    commands[cmd](arg)
    
